#Normal image to ASCII image 

param( 

  [string]$path = $( "Z:\pp.jpg"), # Replace the path in quotation marks with the image you want. 
  [int]$maxwidth,            # Default is width of console 
  [string]$palette="ascii",  # Choose a palette, "ascii" or "shade" 
  [float]$ratio = 1.5        # 1.5 means char height is 1.5 x width 
  ) 
#------------------------------------------------------------------------------ 
$palettes = @{ 
  "ascii" = " .,:;=|iI+hHOE#`$" # You can change the characters that make up the image here
  "shade" = " " + [char]0x2591 + [char]0x2592 + [char]0x2593 + [char]0x2588 
  "bw"    = " " + [char]0x2588 
} 
$c = $palettes[$palette] 
if (-not $c) { 
  write-warning "palette should be one of:  $($palettes.keys.GetEnumerator())" 
  write-warning "defaulting to ascii" 
  $c = $palettes.ascii 
} 
[char[]]$charpalette = $c.ToCharArray() 
 
# we need the drawing assembly 
[System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")  
[Reflection.Assembly]::LoadFrom($dllpath) | out-null 

# load the image 
$image = [Drawing.Image]::FromFile($path) 
if ($maxwidth -le 0) { [int]$maxwidth = $host.ui.rawui.WindowSize.Width - 1} 
    [int]$imgwidth = $image.Width 
    [int]$maxheight = $image.Height / ($imgwidth / $maxwidth) / $ratio 
    $bitmap = new-object Drawing.Bitmap ($image,$maxwidth,$maxheight) 
    [int]$bwidth = $bitmap.Width; [int]$bheight = $bitmap.Height 

# draw it! 

$cplen = $charpalette.count 
for ([int]$y=0; $y -lt $bheight; $y++) { 
  $line = "" 
     for ([int]$x=0; $x -lt $bwidth; $x++) { 
          $colour = $bitmap.GetPixel($x,$y) 
          $bright = $colour.GetBrightness() 
          [int]$offset = [Math]::Floor($bright*$cplen) 
           $ch = $charpalette[$offset] 
              if (-not $ch) { $ch = $charpalette[-1] } #overflow 
                  $line += $ch 
              } 
  $line 
} 
